/**
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveOcrApiClientAsync) {
      root.CloudmersiveOcrApiClientAsync = {};
    }
    root.CloudmersiveOcrApiClientAsync.FormTableColumnDefinition = factory(root.CloudmersiveOcrApiClientAsync.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FormTableColumnDefinition model module.
   * @module model/FormTableColumnDefinition
   * @version 1.3.3
   */

  /**
   * Constructs a new <code>FormTableColumnDefinition</code>.
   * Definition of a column within a table for OCR data extraction from images
   * @alias module:model/FormTableColumnDefinition
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>FormTableColumnDefinition</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormTableColumnDefinition} obj Optional instance to populate.
   * @return {module:model/FormTableColumnDefinition} The populated <code>FormTableColumnDefinition</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ColumnID')) {
        obj['ColumnID'] = ApiClient.convertToType(data['ColumnID'], 'String');
      }
      if (data.hasOwnProperty('TopAnchor')) {
        obj['TopAnchor'] = ApiClient.convertToType(data['TopAnchor'], 'String');
      }
      if (data.hasOwnProperty('AnchorMode')) {
        obj['AnchorMode'] = ApiClient.convertToType(data['AnchorMode'], 'String');
      }
      if (data.hasOwnProperty('DataType')) {
        obj['DataType'] = ApiClient.convertToType(data['DataType'], 'String');
      }
      if (data.hasOwnProperty('MinimumCharacterCount')) {
        obj['MinimumCharacterCount'] = ApiClient.convertToType(data['MinimumCharacterCount'], 'Number');
      }
      if (data.hasOwnProperty('AllowNumericDigits')) {
        obj['AllowNumericDigits'] = ApiClient.convertToType(data['AllowNumericDigits'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The identifier of the field; use this to identify which field is being referenced
   * @member {String} ColumnID
   */
  exports.prototype['ColumnID'] = undefined;
  /**
   * Optional - the top anchor of the column heading
   * @member {String} TopAnchor
   */
  exports.prototype['TopAnchor'] = undefined;
  /**
   * Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.
   * @member {String} AnchorMode
   */
  exports.prototype['AnchorMode'] = undefined;
  /**
   * The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
   * @member {String} DataType
   */
  exports.prototype['DataType'] = undefined;
  /**
   * Optional - the target number of digits in the field; useful for fixed-length fields
   * @member {Number} MinimumCharacterCount
   */
  exports.prototype['MinimumCharacterCount'] = undefined;
  /**
   * Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
   * @member {Boolean} AllowNumericDigits
   */
  exports.prototype['AllowNumericDigits'] = undefined;



  return exports;
}));


